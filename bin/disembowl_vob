#!/usr/bin/env python
# -*- coding: utf-8; mode: python; -*-

##  Copyright 2010-13 by Diedrich Vorberg <diedrich@tux4web.de>
##
##  All Rights Reserved
##
##  For more Information on orm see the README file.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
##  I have added a copy of the GPL in the file LICENSE

import sys, os, os.path as op, re, subprocess, time, optparse
from string import *

from t4.debug import log

options = None
        
def main():
    global options
    
    parser = optparse.OptionParser(
        usage="usage: %prog [options] [-h] <input file>")

    parser.add_option("-o", dest="outdir",
                      default=op.join(os.getenv("HOME"), "Desktop"))

    log.add_option(parser)

    ( options, args, ) = parser.parse_args()

    if len(args) < 1:
        parser.error("Please specify an imput file on the command line.")
    
    for vobfile in args:
        disembowl(op.basename(vobfile))


def disembowl(vobfile):
    vobname = rsplit(op.basename(vobfile), ".", 1)[0]

    cmd = ["ffmpeg", "-i", vobfile, ]

    ffmpeg = subprocess.Popen(cmd, stderr=subprocess.PIPE)
    ffmpeg.wait()
    output = ffmpeg.stderr.read()

    info_re = re.compile(
        r"Stream #(\d+[:\.]\d+)\[(0x[0-9a-f]+)\]: (:?Video|Audio)")
    result = info_re.findall(output)

    # Sort the input streams
    video_stream = None
    by_number = {}

    for stream, number, type in result:
        if type == "Video":
            video_stream = stream
        else:
            by_number[number] = stream

    for number, stream in by_number.items():
        fn = "%s-%s.wav" % ( stream[2:], vobname, )
        cmd = ["ffmpeg", "-y", "-i", vobfile, "-t", "00:06:00",
               "-ac", "2",
               "-map", stream,
               op.join(options.outdir, fn), ]

        print >> log, join(cmd, " ")

        audio = subprocess.Popen(cmd,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
        stdout, stderr = audio.communicate()

main()    
